{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "PRAVEEN-DF21"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable3meta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerH21",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "apiref",
						"type": "nvarchar"
					},
					{
						"name": "desttable",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "metadata"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableBDest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerH21",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DWTableName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"DWSchema": {
						"type": "string",
						"defaultValue": "raw_d126m"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().DWSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().DWTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableBSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerStagingList",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "dummyName"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatherdailyforecast_xf0_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedServiceSqlControl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "weatherdailyforecast_xf0_20210729"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "Weather",
					"table": "RestMetaDataForCopyLoad"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatherdailyforecast_xf0_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedServiceSqlControl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "weatherdailyforecast_xf0_20210729"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json10",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Json11",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextjsonflat",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "Flatten2"
						}
					],
					"script": "source(output(\n\t\tid as string,\n\t\ttype as string,\n\t\tname as string,\n\t\tppu as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource(output(\n\t\tid as string,\n\t\ttype as string,\n\t\tname as string,\n\t\tppu as double,\n\t\tbatters as (batter as (id as string, type as string)[]),\n\t\ttopping as (id as string, type as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tbackslashEscape: true) ~> source2\nsource2 foldDown(unroll(batters.batter, batters.batter),\n\tmapColumn(\n\t\tid,\n\t\ttype,\n\t\tname,\n\t\tppu,\n\t\tbatterid = batters.batter.id,\n\t\ttopping,\n\t\tbattertype = batters.batter.type\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 foldDown(unroll(topping),\n\tmapColumn(\n\t\tid,\n\t\ttype,\n\t\tname,\n\t\tppu,\n\t\tbatterid,\n\t\ttoppingid = topping.id,\n\t\tbattertype,\n\t\ttoppingtype = topping.type\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten2\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1) ~> sink1\nFlatten2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spacedeldataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Parse1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tcol0 as string,\n\t\tcol1 as string,\n\t\tcol2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> source1\nsource1 parse(col22 = col2 ? (val1 as integer,\n\t\tval2 as integer,\n\t\tval3 as integer),\n\tformat: 'delimited',\n\tcolumnNamesAsHeader: false,\n\tcolumnDelimiter: ',',\n\tnullValue: '') ~> Parse1\nParse1 select(mapColumn(\n\t\tcol0,\n\t\tcol1,\n\t\tval1 = col22.val1,\n\t\tval2 = col22.val2,\n\t\tval3 = col22.val3\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_j6k')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_j6k",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.dftest"
							},
							{
								"name": "Destination",
								"value": "praveen-container//dflowsrc"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_j6k",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_j6k",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-09T12:35:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_restapi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_2x7",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "https://api.weatherbit.io/v2.0/current?lat=35.7796&lon=-78.6382&key=3ff6578b600c4836aa388101b1bf64ff&include=hourly"
							},
							{
								"name": "Destination",
								"value": "weather.REST resource"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "SqlServerSink",
								"tableOption": "autoCreate",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['data'][0]['rh']"
										},
										"sink": {
											"name": "rh"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['pod']"
										},
										"sink": {
											"name": "pod"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['lon']"
										},
										"sink": {
											"name": "lon"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['pres']"
										},
										"sink": {
											"name": "pres"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['timezone']"
										},
										"sink": {
											"name": "timezone"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['ob_time']"
										},
										"sink": {
											"name": "ob_time"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['country_code']"
										},
										"sink": {
											"name": "country_code"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['clouds']"
										},
										"sink": {
											"name": "clouds"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['ts']"
										},
										"sink": {
											"name": "ts"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['solar_rad']"
										},
										"sink": {
											"name": "solar_rad"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['state_code']"
										},
										"sink": {
											"name": "state_code"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['city_name']"
										},
										"sink": {
											"name": "city_name"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['sunset']"
										},
										"sink": {
											"name": "sunset"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['snow']"
										},
										"sink": {
											"name": "snow"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['uv']"
										},
										"sink": {
											"name": "uv"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['precip']"
										},
										"sink": {
											"name": "precip"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['sunrise']"
										},
										"sink": {
											"name": "sunri"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['weather']['description']"
										},
										"sink": {
											"name": "descip"
										}
									},
									{
										"source": {
											"path": "$['data'][0]['temp']"
										},
										"sink": {
											"name": "temp"
										}
									}
								],
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_2x7",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_2x7",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-29T10:22:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IterateAndCopySQLTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "IF EXISTS (SELECT * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}])TRUNCATE TABLE [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"writeBehavior": "insert"
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "Store Account Linked Service",
												"type": "LinkedServiceReference"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTableBSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTableBDest",
											"type": "DatasetReference",
											"parameters": {
												"DWTableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"DWSchema": "@item().TABLE_SCHEMA"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-02T16:00:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableBSource')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTableBDest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask2_vj9_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%')\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MetadataDrivenCopyTask2_vj9_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask2_vj9_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask2_vj9_20210728"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-28T14:23:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_esm_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load via watermark column to identify changes.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).relativeUrl}"
															},
															{
																"name": "Destination",
																"value": ".@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "RestSource",
																"httpRequestTimeout": {
																	"value": "@json(item().CopySourceSettings).httpRequestTimeout",
																	"type": "Expression"
																},
																"requestInterval": {
																	"value": "@json(item().CopySourceSettings).requestInterval",
																	"type": "Expression"
																},
																"requestMethod": {
																	"value": "@json(item().CopySourceSettings).requestMethod",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																},
																"writeBehavior": {
																	"type": "Expression",
																	"value": "@json(item().CopySinkSettings).writeBehavior"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_esm_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_relativeUrl": {
																		"value": "@json(item().SourceObjectSettings).relativeUrl",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_esm_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).relativeUrl}"
													},
													{
														"name": "Destination",
														"value": ".@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": {
															"value": "@json(item().CopySourceSettings).httpRequestTimeout",
															"type": "Expression"
														},
														"requestInterval": {
															"value": "@json(item().CopySourceSettings).requestInterval",
															"type": "Expression"
														},
														"requestMethod": {
															"value": "@json(item().CopySourceSettings).requestMethod",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														},
														"writeBehavior": {
															"type": "Expression",
															"value": "@json(item().CopySinkSettings).writeBehavior"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_esm_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_relativeUrl": {
																"value": "@json(item().SourceObjectSettings).relativeUrl",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_esm_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_esm_20210730"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-30T09:14:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_z88_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load via watermark column to identify changes.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).relativeUrl}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "RestSource",
																"httpRequestTimeout": {
																	"value": "@json(item().CopySourceSettings).httpRequestTimeout",
																	"type": "Expression"
																},
																"requestInterval": {
																	"value": "@json(item().CopySourceSettings).requestInterval",
																	"type": "Expression"
																},
																"requestMethod": {
																	"value": "@json(item().CopySourceSettings).requestMethod",
																	"type": "Expression"
																},
																"additionalHeaders": {
																	"type": "Expression",
																	"value": {
																		"value": "@json(item().CopySourceSettings).additionalHeaders",
																		"type": "Expression"
																	}
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																},
																"writeBehavior": {
																	"type": "Expression",
																	"value": "@json(item().CopySinkSettings).writeBehavior"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_z88_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_relativeUrl": {
																		"value": "@json(item().SourceObjectSettings).relativeUrl",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "MetadataDrivenCopyTask_z88_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).relativeUrl}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": {
															"value": "@json(item().CopySourceSettings).httpRequestTimeout",
															"type": "Expression"
														},
														"requestInterval": {
															"value": "@json(item().CopySourceSettings).requestInterval",
															"type": "Expression"
														},
														"requestMethod": {
															"value": "@json(item().CopySourceSettings).requestMethod",
															"type": "Expression"
														},
														"additionalHeaders": {
															"type": "Expression",
															"value": {
																"value": "@json(item().CopySourceSettings).additionalHeaders",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														},
														"writeBehavior": {
															"type": "Expression",
															"value": "@json(item().CopySinkSettings).writeBehavior"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_z88_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_relativeUrl": {
																"value": "@json(item().SourceObjectSettings).relativeUrl",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MetadataDrivenCopyTask_z88_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_z88_20210730"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-30T11:25:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableapi",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(item().cref)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"BaseUrl": {
													"value": "@item().apiref",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTable2",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().desttable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableapi": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T09:35:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-02T13:51:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2rest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tlist",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "SqlServerSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['description']"
													},
													"sink": {
														"name": "description",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['alerts']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"BaseUrl": {
													"value": "@item().apiref",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTable2",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@item().desttable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tlist": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-08-06T14:57:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2spacedeli')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-03T13:47:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weatherdailyforecast_xf0_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load via watermark column to identify changes.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).relativeUrl}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "RestSource",
																"httpRequestTimeout": {
																	"value": "@json(item().CopySourceSettings).httpRequestTimeout",
																	"type": "Expression"
																},
																"requestInterval": {
																	"value": "@json(item().CopySourceSettings).requestInterval",
																	"type": "Expression"
																},
																"requestMethod": {
																	"value": "@json(item().CopySourceSettings).requestMethod",
																	"type": "Expression"
																},
																"additionalHeaders": {
																	"type": "Expression",
																	"value": {
																		"value": "@json(item().CopySourceSettings).additionalHeaders",
																		"type": "Expression"
																	}
																}
															},
															"sink": {
																"type": "SqlServerSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																},
																"writeBehavior": {
																	"type": "Expression",
																	"value": "@json(item().CopySinkSettings).writeBehavior"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "weatherdailyforecast_xf0_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_relativeUrl": {
																		"value": "@json(item().SourceObjectSettings).relativeUrl",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "weatherdailyforecast_xf0_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).relativeUrl}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "RestSource",
														"httpRequestTimeout": {
															"value": "@json(item().CopySourceSettings).httpRequestTimeout",
															"type": "Expression"
														},
														"requestInterval": {
															"value": "@json(item().CopySourceSettings).requestInterval",
															"type": "Expression"
														},
														"requestMethod": {
															"value": "@json(item().CopySourceSettings).requestMethod",
															"type": "Expression"
														},
														"additionalHeaders": {
															"type": "Expression",
															"value": {
																"value": "@json(item().CopySourceSettings).additionalHeaders",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														},
														"writeBehavior": {
															"type": "Expression",
															"value": "@json(item().CopySinkSettings).writeBehavior"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "weatherdailyforecast_xf0_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_relativeUrl": {
																"value": "@json(item().SourceObjectSettings).relativeUrl",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "weatherdailyforecast_xf0_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "weatherdailyforecast_xf0_20210729"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-29T11:15:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weatherdailyforecast_xf0_DestinationDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetTableListAndTriggerCopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTableList",
						"description": "Retrieve the table list from my database for Description",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT  [SCHEMA]  TABLE_SCHEMA,\n[sname] [TABLE_NAME]\n      \n      \n  FROM [H21_STAGING].[dbo].[mload]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTableBSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TriggerCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IterateAndCopySQLTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"tableList": {
									"value": "@activity('LookupTableList').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-03T14:33:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableBSource')]",
				"[concat(variables('factoryId'), '/pipelines/IterateAndCopySQLTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask2_vj9_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDrivenCopyTask2_vj9_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBtach",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MetadataDrivenCopyTask2_vj9_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "[AzureMetaDataControl].testazcontrol.MainControlTable_vj9"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask2_vj9_20210728"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2021-07-28T14:23:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDrivenCopyTask2_vj9_MiddleLevel')]"
			]
		}
	]
}